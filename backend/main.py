# =====================================================
# üìÅ backend/main.py
# =====================================================

import logging
from pathlib import Path
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles

# Database & Models
from backend.database import engine
from backend import models

# Routers
from backend.routes import (
    auth,
    khachhang,
    nhanvien,
    danhmuc,
    sanpham,
    donhang,
    chitietdonhang,
    thanhtoan,
    baocao,
    promotion,
    inventory,
    danhgia,
    khieunai,
)

# =====================================================
# üöÄ 1. Kh·ªüi t·∫°o ·ª©ng d·ª•ng FastAPI
# =====================================================
app = FastAPI(
    title="H·ªá th·ªëng Qu·∫£n L√Ω B√°n H√†ng",
    description="API backend cho h·ªá th·ªëng qu·∫£n l√Ω b√°n h√†ng t√≠ch h·ª£p AI & ph√¢n quy·ªÅn",
    version="1.0.0",
)

# =====================================================
# üåê 2. C·∫•u h√¨nh CORS
# =====================================================
# ‚ö†Ô∏è Khi deploy th·∫≠t, n√™n thay allow_origins=["*"] b·∫±ng domain frontend c·ª• th·ªÉ.
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # v√≠ d·ª•: ["http://localhost:5500"]
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# =====================================================
# üß± 3. Mount frontend tƒ©nh (d√†nh cho demo ho·∫∑c test local)
# =====================================================
frontend_dir = Path(__file__).resolve().parents[1] / "frontend"
if frontend_dir.exists():
    app.mount("/frontend", StaticFiles(directory=str(frontend_dir)),
              name="frontend")

# =====================================================
# ü™µ 4. C·∫•u h√¨nh logging (Ghi log ra file)
# =====================================================

log_dir = Path(__file__).resolve().parents[1] / "logs"
log_dir.mkdir(exist_ok=True)

logging.basicConfig(
    filename=log_dir / "activity.log",
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# =====================================================
# üîó 5. ƒêƒÉng k√Ω c√°c routers (chia nh√≥m API theo ch·ª©c nƒÉng)
# =====================================================
app.include_router(auth.router, prefix="/api/auth", tags=["Auth"])
app.include_router(khachhang.router, prefix="/api/khachhang",
                   tags=["Kh√°ch h√†ng"])
app.include_router(nhanvien.router, prefix="/api/nhanvien", tags=["Nh√¢n vi√™n"])
app.include_router(danhmuc.router, prefix="/api/danhmuc", tags=["Danh m·ª•c"])
app.include_router(sanpham.router, prefix="/api/sanpham", tags=["S·∫£n ph·∫©m"])
app.include_router(donhang.router, prefix="/api/donhang", tags=["ƒê∆°n h√†ng"])
app.include_router(chitietdonhang.router,
                   prefix="/api/chitietdonhang", tags=["Chi ti·∫øt ƒë∆°n h√†ng"])
app.include_router(thanhtoan.router, prefix="/api/thanhtoan",
                   tags=["Thanh to√°n"])
app.include_router(baocao.router, prefix="/api/baocao", tags=["B√°o c√°o"])
app.include_router(promotion.router, prefix="/api", tags=["Khuy·∫øn m√£i"])
app.include_router(inventory.router, prefix="/api", tags=["T·ªìn kho"])
app.include_router(danhgia.router, prefix="/api", tags=["ƒê√°nh gi√°"])
app.include_router(khieunai.router, prefix="/api", tags=["Khi·∫øu n·∫°i"])

# =====================================================
# üß© 6. S·ª± ki·ªán kh·ªüi ƒë·ªông - t·∫°o b·∫£ng CSDL n·∫øu ch∆∞a c√≥
# =====================================================


@app.on_event("startup")
def on_startup_create_db():
    """T·ª± ƒë·ªông t·∫°o c√°c b·∫£ng trong CSDL n·∫øu ch∆∞a t·ªìn t·∫°i."""
    models.Base.metadata.create_all(bind=engine)
    logging.info("‚úÖ Database tables checked/created successfully.")

# =====================================================
# üè† 7. Route g·ªëc - ki·ªÉm tra k·∫øt n·ªëi backend
# =====================================================


@app.get("/", tags=["Root"])
def root():
    logging.info("Root endpoint accessed.")
    return {"message": "‚úÖ Backend FastAPI ƒë√£ k·∫øt n·ªëi MySQL th√†nh c√¥ng!"}
