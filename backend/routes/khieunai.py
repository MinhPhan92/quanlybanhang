# backend/routes/khieunai.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_
from backend.database import get_db
from backend.models import KhieuNai, KhachHang, NhanVien
from backend.routes.deps import get_current_user
from backend.schemas import (
    ComplaintCreateRequest, 
    ComplaintResponse, 
    ComplaintUpdateRequest, 
    ComplaintListResponse
)
from datetime import datetime
from typing import List, Optional

router = APIRouter(prefix="/complaints", tags=["Complaints"])

# =====================================================
# üßæ Routes
# =====================================================

@router.post("/", response_model=ComplaintResponse, summary="T·∫°o khi·∫øu n·∫°i")
def create_complaint(
    complaint_data: ComplaintCreateRequest,
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user)
):
    """
    T·∫°o khi·∫øu n·∫°i m·ªõi.
    Ch·ªâ kh√°ch h√†ng m·ªõi c√≥ th·ªÉ t·∫°o khi·∫øu n·∫°i.
    """
    # Role check: Only customers can create complaints
    if current_user.get("role") != "KhachHang":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Ch·ªâ kh√°ch h√†ng m·ªõi c√≥ th·ªÉ t·∫°o khi·∫øu n·∫°i"
        )
    
    try:
        # Get customer ID from JWT token
        customer_id = current_user.get("user_id")
        if not customer_id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng"
            )
        
        # Validate input
        if not complaint_data.TieuDe.strip():
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
            )
        
        if not complaint_data.NoiDung.strip():
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
            )
        
        # Create new complaint
        new_complaint = KhieuNai(
            MaKH=customer_id,
            TieuDe=complaint_data.TieuDe.strip(),
            NoiDung=complaint_data.NoiDung.strip(),
            TrangThai="Pending",
            NgayTao=datetime.now(),
            NgayCapNhat=datetime.now(),
            IsDelete=False
        )
        
        db.add(new_complaint)
        db.commit()
        db.refresh(new_complaint)
        
        # Get customer name for response
        customer = db.query(KhachHang).filter(KhachHang.MaKH == customer_id).first()
        
        return ComplaintResponse(
            MaKhieuNai=new_complaint.MaKhieuNai,
            MaKH=new_complaint.MaKH,
            TieuDe=new_complaint.TieuDe,
            NoiDung=new_complaint.NoiDung,
            TrangThai=new_complaint.TrangThai,
            NgayTao=new_complaint.NgayTao,
            NgayCapNhat=new_complaint.NgayCapNhat,
            PhanHoi=new_complaint.PhanHoi,
            MaNVPhanHoi=new_complaint.MaNVPhanHoi,
            TenKH=customer.TenKH if customer else None,
            TenNVPhanHoi=None
        )
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"L·ªói t·∫°o khi·∫øu n·∫°i: {str(e)}"
        )

@router.get("/my-complaints", response_model=List[ComplaintResponse], summary="Xem khi·∫øu n·∫°i c·ªßa t√¥i")
def get_my_complaints(
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user)
):
    """
    L·∫•y danh s√°ch khi·∫øu n·∫°i c·ªßa kh√°ch h√†ng hi·ªán t·∫°i.
    """
    # Role check: Only customers can view their complaints
    if current_user.get("role") != "KhachHang":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Ch·ªâ kh√°ch h√†ng m·ªõi c√≥ th·ªÉ xem khi·∫øu n·∫°i c·ªßa m√¨nh"
        )
    
    try:
        customer_id = current_user.get("user_id")
        if not customer_id:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng"
            )
        
        # Get customer's complaints
        complaints = db.query(KhieuNai).filter(
            and_(
                KhieuNai.MaKH == customer_id,
                KhieuNai.IsDelete == False
            )
        ).order_by(KhieuNai.NgayTao.desc()).all()
        
        # Format response
        complaint_list = []
        for complaint in complaints:
            customer = db.query(KhachHang).filter(KhachHang.MaKH == complaint.MaKH).first()
            staff = None
            if complaint.MaNVPhanHoi:
                staff = db.query(NhanVien).filter(NhanVien.MaNV == complaint.MaNVPhanHoi).first()
            
            complaint_list.append(ComplaintResponse(
                MaKhieuNai=complaint.MaKhieuNai,
                MaKH=complaint.MaKH,
                TieuDe=complaint.TieuDe,
                NoiDung=complaint.NoiDung,
                TrangThai=complaint.TrangThai,
                NgayTao=complaint.NgayTao,
                NgayCapNhat=complaint.NgayCapNhat,
                PhanHoi=complaint.PhanHoi,
                MaNVPhanHoi=complaint.MaNVPhanHoi,
                TenKH=customer.TenKH if customer else None,
                TenNVPhanHoi=staff.TenNV if staff else None
            ))
        
        return complaint_list
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"L·ªói l·∫•y khi·∫øu n·∫°i: {str(e)}"
        )

@router.get("/", response_model=ComplaintListResponse, summary="Xem t·∫•t c·∫£ khi·∫øu n·∫°i (Admin/Manager)")
def get_all_complaints(
    status_filter: Optional[str] = None,
    page: int = 1,
    limit: int = 10,
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user)
):
    """
    L·∫•y danh s√°ch t·∫•t c·∫£ khi·∫øu n·∫°i.
    Ch·ªâ Admin v√† Manager m·ªõi c√≥ th·ªÉ xem.
    """
    # Role check: Only Admin and Manager can view all complaints
    if current_user.get("role") not in ["Admin", "Manager"]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Ch·ªâ Admin v√† Manager m·ªõi c√≥ th·ªÉ xem t·∫•t c·∫£ khi·∫øu n·∫°i"
        )
    
    try:
        # Build query
        query = db.query(KhieuNai).filter(KhieuNai.IsDelete == False)
        
        # Apply status filter if provided
        if status_filter:
            valid_statuses = ["Pending", "Processing", "Resolved", "Closed"]
            if status_filter not in valid_statuses:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. C√°c tr·∫°ng th√°i h·ª£p l·ªá: {', '.join(valid_statuses)}"
                )
            query = query.filter(KhieuNai.TrangThai == status_filter)
        
        # Get total count
        total_complaints = query.count()
        
        # Apply pagination
        offset = (page - 1) * limit
        complaints = query.order_by(KhieuNai.NgayTao.desc()).offset(offset).limit(limit).all()
        
        # Format response
        complaint_list = []
        for complaint in complaints:
            customer = db.query(KhachHang).filter(KhachHang.MaKH == complaint.MaKH).first()
            staff = None
            if complaint.MaNVPhanHoi:
                staff = db.query(NhanVien).filter(NhanVien.MaNV == complaint.MaNVPhanHoi).first()
            
            complaint_list.append(ComplaintResponse(
                MaKhieuNai=complaint.MaKhieuNai,
                MaKH=complaint.MaKH,
                TieuDe=complaint.TieuDe,
                NoiDung=complaint.NoiDung,
                TrangThai=complaint.TrangThai,
                NgayTao=complaint.NgayTao,
                NgayCapNhat=complaint.NgayCapNhat,
                PhanHoi=complaint.PhanHoi,
                MaNVPhanHoi=complaint.MaNVPhanHoi,
                TenKH=customer.TenKH if customer else None,
                TenNVPhanHoi=staff.TenNV if staff else None
            ))
        
        return ComplaintListResponse(
            complaints=complaint_list,
            total=total_complaints
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"L·ªói l·∫•y khi·∫øu n·∫°i: {str(e)}"
        )

@router.put("/{ma_khieunai}", response_model=ComplaintResponse, summary="C·∫≠p nh·∫≠t khi·∫øu n·∫°i")
def update_complaint(
    ma_khieunai: int,
    update_data: ComplaintUpdateRequest,
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user)
):
    """
    C·∫≠p nh·∫≠t khi·∫øu n·∫°i (tr·∫°ng th√°i v√† ph·∫£n h·ªìi).
    Ch·ªâ Admin v√† Manager m·ªõi c√≥ th·ªÉ c·∫≠p nh·∫≠t.
    """
    # Role check: Only Admin and Manager can update complaints
    if current_user.get("role") not in ["Admin", "Manager"]:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Ch·ªâ Admin v√† Manager m·ªõi c√≥ th·ªÉ c·∫≠p nh·∫≠t khi·∫øu n·∫°i"
        )
    
    try:
        # Get complaint
        complaint = db.query(KhieuNai).filter(
            and_(
                KhieuNai.MaKhieuNai == ma_khieunai,
                KhieuNai.IsDelete == False
            )
        ).first()
        
        if not complaint:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Khi·∫øu n·∫°i kh√¥ng t·ªìn t·∫°i"
            )
        
        # Get staff ID from JWT token
        staff_id = current_user.get("user_id")
        
        # Update fields
        if update_data.TrangThai is not None:
            valid_statuses = ["Pending", "Processing", "Resolved", "Closed"]
            if update_data.TrangThai not in valid_statuses:
                raise HTTPException(
                    status_code=status.HTTP_400_BAD_REQUEST,
                    detail=f"Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá. C√°c tr·∫°ng th√°i h·ª£p l·ªá: {', '.join(valid_statuses)}"
                )
            complaint.TrangThai = update_data.TrangThai
        
        if update_data.PhanHoi is not None:
            complaint.PhanHoi = update_data.PhanHoi.strip()
            complaint.MaNVPhanHoi = staff_id
        
        complaint.NgayCapNhat = datetime.now()
        
        db.commit()
        db.refresh(complaint)
        
        # Get related data for response
        customer = db.query(KhachHang).filter(KhachHang.MaKH == complaint.MaKH).first()
        staff = None
        if complaint.MaNVPhanHoi:
            staff = db.query(NhanVien).filter(NhanVien.MaNV == complaint.MaNVPhanHoi).first()
        
        return ComplaintResponse(
            MaKhieuNai=complaint.MaKhieuNai,
            MaKH=complaint.MaKH,
            TieuDe=complaint.TieuDe,
            NoiDung=complaint.NoiDung,
            TrangThai=complaint.TrangThai,
            NgayTao=complaint.NgayTao,
            NgayCapNhat=complaint.NgayCapNhat,
            PhanHoi=complaint.PhanHoi,
            MaNVPhanHoi=complaint.MaNVPhanHoi,
            TenKH=customer.TenKH if customer else None,
            TenNVPhanHoi=staff.TenNV if staff else None
        )
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"L·ªói c·∫≠p nh·∫≠t khi·∫øu n·∫°i: {str(e)}"
        )

@router.get("/{ma_khieunai}", response_model=ComplaintResponse, summary="Xem chi ti·∫øt khi·∫øu n·∫°i")
def get_complaint_detail(
    ma_khieunai: int,
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user)
):
    """
    Xem chi ti·∫øt khi·∫øu n·∫°i.
    Kh√°ch h√†ng ch·ªâ c√≥ th·ªÉ xem khi·∫øu n·∫°i c·ªßa m√¨nh.
    Admin/Manager c√≥ th·ªÉ xem t·∫•t c·∫£.
    """
    try:
        # Get complaint
        complaint = db.query(KhieuNai).filter(
            and_(
                KhieuNai.MaKhieuNai == ma_khieunai,
                KhieuNai.IsDelete == False
            )
        ).first()
        
        if not complaint:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Khi·∫øu n·∫°i kh√¥ng t·ªìn t·∫°i"
            )
        
        # Check permissions
        user_role = current_user.get("role")
        customer_id = current_user.get("user_id")
        
        if user_role == "KhachHang" and complaint.MaKH != customer_id:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="B·∫°n ch·ªâ c√≥ th·ªÉ xem khi·∫øu n·∫°i c·ªßa m√¨nh"
            )
        
        # Get related data
        customer = db.query(KhachHang).filter(KhachHang.MaKH == complaint.MaKH).first()
        staff = None
        if complaint.MaNVPhanHoi:
            staff = db.query(NhanVien).filter(NhanVien.MaNV == complaint.MaNVPhanHoi).first()
        
        return ComplaintResponse(
            MaKhieuNai=complaint.MaKhieuNai,
            MaKH=complaint.MaKH,
            TieuDe=complaint.TieuDe,
            NoiDung=complaint.NoiDung,
            TrangThai=complaint.TrangThai,
            NgayTao=complaint.NgayTao,
            NgayCapNhat=complaint.NgayCapNhat,
            PhanHoi=complaint.PhanHoi,
            MaNVPhanHoi=complaint.MaNVPhanHoi,
            TenKH=customer.TenKH if customer else None,
            TenNVPhanHoi=staff.TenNV if staff else None
        )
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"L·ªói l·∫•y chi ti·∫øt khi·∫øu n·∫°i: {str(e)}"
        )

@router.delete("/{ma_khieunai}", response_model=dict, summary="X√≥a khi·∫øu n·∫°i")
def delete_complaint(
    ma_khieunai: int,
    db: Session = Depends(get_db),
    current_user: dict = Depends(get_current_user)
):
    """
    X√≥a khi·∫øu n·∫°i (soft delete).
    Ch·ªâ Admin m·ªõi c√≥ th·ªÉ x√≥a.
    """
    # Role check: Only Admin can delete complaints
    if current_user.get("role") != "Admin":
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="Ch·ªâ Admin m·ªõi c√≥ th·ªÉ x√≥a khi·∫øu n·∫°i"
        )
    
    try:
        # Get complaint
        complaint = db.query(KhieuNai).filter(
            and_(
                KhieuNai.MaKhieuNai == ma_khieunai,
                KhieuNai.IsDelete == False
            )
        ).first()
        
        if not complaint:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="Khi·∫øu n·∫°i kh√¥ng t·ªìn t·∫°i"
            )
        
        # Soft delete
        complaint.IsDelete = True
        db.commit()
        
        return {"message": "ƒê√£ x√≥a khi·∫øu n·∫°i th√†nh c√¥ng"}
        
    except HTTPException:
        raise
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"L·ªói x√≥a khi·∫øu n·∫°i: {str(e)}"
        )
