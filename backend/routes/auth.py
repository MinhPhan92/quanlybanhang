# backend/routes/auth.py
from fastapi import APIRouter, Depends, HTTPException, status
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
from jose import jwt
from passlib.context import CryptContext

from backend.database import get_db
from backend.models import NhanVien, TaiKhoan, KhachHang
from backend.schemas import RegisterRequest, LoginRequest, TokenResponse, UserResponse

# =====================================================
# üîê Auth Router
# =====================================================
router = APIRouter(tags=["Auth"])

# =====================================================
# ‚öôÔ∏è JWT Configuration
# =====================================================
SECRET_KEY = "67PM3"  # ‚ö†Ô∏è N√™n l∆∞u trong bi·∫øn m√¥i tr∆∞·ªùng .env khi deploy
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

# Password hashing
pwd_context = CryptContext(schemes=["pbkdf2_sha256"], deprecated="auto")


# =====================================================
# üß© Utility Functions
# =====================================================
def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Ki·ªÉm tra m·∫≠t kh·∫©u c√≥ kh·ªõp v·ªõi hash kh√¥ng"""
    if not hashed_password:
        return False
    return pwd_context.verify(plain_password, hashed_password)


def get_password_hash(password: str) -> str:
    """T·∫°o hash t·ª´ m·∫≠t kh·∫©u"""
    return pwd_context.hash(password)


def create_access_token(user: NhanVien, expires_minutes: int = ACCESS_TOKEN_EXPIRE_MINUTES) -> str:
    """T·∫°o JWT token cho ng∆∞·ªùi d√πng"""
    expire = datetime.utcnow() + timedelta(minutes=expires_minutes)
    payload = {
        "user_id": user.MaNV,
        "username": user.SdtNV or user.TenNV,
        "role": user.ChucVu or "Employee",
        "exp": expire
    }
    return jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)


def create_access_token_from_account(account: TaiKhoan, user, expires_minutes: int = ACCESS_TOKEN_EXPIRE_MINUTES) -> str:
    """T·∫°o JWT token t·ª´ t√†i kho·∫£n"""
    expire = datetime.utcnow() + timedelta(minutes=expires_minutes)

    # X√°c ƒë·ªãnh user_id v√† username d·ª±a tr√™n lo·∫°i user
    if hasattr(user, 'MaNV'):  # NhanVien
        user_id = user.MaNV
        username = user.SdtNV or user.TenNV
    elif hasattr(user, 'MaKH'):  # KhachHang
        user_id = user.MaKH
        username = user.SdtKH or user.TenKH
    else:
        user_id = account.MaTK
        username = account.Username

    payload = {
        "user_id": user_id,
        "username": username,
        "role": account.VaiTro or "Employee",
        "account_id": account.MaTK,
        "exp": expire
    }
    return jwt.encode(payload, SECRET_KEY, algorithm=ALGORITHM)


# =====================================================
# üßæ Routes
# =====================================================
@router.post("/register", response_model=UserResponse)
def register_user(request_data: RegisterRequest, db: Session = Depends(get_db)):
    # B∆Ø·ªöC 1: M√É H√ìA M·∫¨T KH·∫®U
    hashed_password = get_password_hash(request_data.password)

    # B∆Ø·ªöC 2: T·∫†O V√Ä L∆ØU NH√ÇN VI√äN (l∆∞u hashed_password v√†o NhanVien)
    new_employee = NhanVien(
        TenNV=request_data.TenNV,
        ChucVu=request_data.ChucVu,
        SdtNV=request_data.SdtNV,
    )
    db.add(new_employee)
    db.commit()
    db.refresh(new_employee)

    # B∆Ø·ªöC 3: T·∫†O V√Ä L∆ØU T√ÄI KHO·∫¢N (l∆∞u hash v√†o TaiKhoan.Pass)
    new_account = TaiKhoan(
        Username=request_data.SdtNV,
        Pass=hashed_password,
        VaiTro=request_data.ChucVu,
        MaNV=new_employee.MaNV
    )
    db.add(new_account)
    db.commit()
    db.refresh(new_account)

    return {
        "MaTK": new_account.MaTK,
        "username": new_account.Username,
        "role": new_account.VaiTro
    }


@router.post("/login", response_model=TokenResponse, summary="ƒêƒÉng nh·∫≠p h·ªá th·ªëng")
def login(credentials: LoginRequest, db: Session = Depends(get_db)):
    """
    ƒêƒÉng nh·∫≠p b·∫±ng Username + M·∫≠t kh·∫©u.  
    Tr·∫£ v·ªÅ JWT Token n·∫øu th√†nh c√¥ng.
    """
    username = credentials.username
    password = credentials.password

    if not username or not password:
        raise HTTPException(
            status_code=400, detail="Username v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc")

    # T√¨m t√†i kho·∫£n theo username
    account = db.query(TaiKhoan).filter(TaiKhoan.Username ==
                                        username, TaiKhoan.IsDelete == False).first()

    if not account or not verify_password(password, account.Pass):
        raise HTTPException(
            status_code=401, detail="Th√¥ng tin ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá")

    # L·∫•y th√¥ng tin nh√¢n vi√™n ho·∫∑c kh√°ch h√†ng
    user = None
    if account.MaNV:
        user = db.query(NhanVien).filter(NhanVien.MaNV == account.MaNV).first()
    elif account.MaKH:
        user = db.query(KhachHang).filter(
            KhachHang.MaKH == account.MaKH).first()

    if not user:
        raise HTTPException(
            status_code=401, detail="Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng")

    # T·∫°o token v·ªõi th√¥ng tin t·ª´ account
    token = create_access_token_from_account(account, user)

    user_info = {
        "MaTK": account.MaTK,
        "username": account.Username,
        "role": account.VaiTro or "Employee"
    }

    return {
        "status": "success",
        "message": "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
        "token": token,
        "user": user_info
    }
